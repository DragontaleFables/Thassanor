/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
   Author: 			Hayden Reeve
   File:			CharAudio.cs
   Version:			0.0.0
   Description: 	Handles all of the Player's audio requirements.
// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

using UnityEngine;

public class CharAudio : MonoBehaviour {

	/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
		References
	// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

	private AudioManager _audio;

	/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
		Variables
	// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

	[HideInInspector] public bool _local;

	/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
		Instantation
	// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

	// Called before Start().
	private void Awake() {

		_audio = FindObjectOfType<AudioManager>();

	}

	/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
		Class Calls
	// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

	/* ----------------------------------------------------------------------------- */
	// SFX

	public void AudioDeath() {

		_audio.SingleCharDeath(transform.position);
		_audio.SingleCharHurt(transform.position);

	}

	public void AudioSummonWarrior() => _audio.SingleSpellWarrior(transform.position);
	public void AudioSummonArcher() => _audio.SingleSpellArcher(transform.position);
	public void AudioResurrect() => _audio.SingleSpellResurrection(transform.position);

	/* ----------------------------------------------------------------------------- */
	// Music

	public void UpdateMusic(float health, float proximity) {

		proximity = Dragontale.MathFable.Remap(proximity, 0, 100, 0, 1);

		if (health > 0) {
			_audio.HealthParam(health);
			_audio.IntensityParam(proximity);

		} else {
			_audio.IntensityParam(2);
		}

	}

	/* ----------------------------------------------------------------------------- */

}
