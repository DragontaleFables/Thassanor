using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
   Author: 			Hayden Reeve
   File:			XMLExtender.cs
   Description: 	This script is used to extend the _XMLDatabase custom script, allowing us to easily view and edit the databases within the game. 
// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

[CustomEditor(typeof(_XMLDatabase))]
public class XMLEtender : Editor {

	// ---- Private variables

	private int _itWeaponCount;
	private int _itArmourCount;
	private int _itOpponentCount;

	private bool _showWeapons = false;
	private bool _showArmours = false;
	private bool _showOpponents = false;

	// ---- The inspector itself

	public override void OnInspectorGUI() {

		// ---- SAVE / LOAD FUNCTIONS
		// This creates a button to load from the XML file during the Editor Runtime, as well as gives us access to our booleans controlling Save/Load on Execution.

		GUILayout.Space (10);
		_XMLDatabase xmlDB = (_XMLDatabase)target;

		if (GUILayout.Button("Populate from XML")) {
			xmlDB.AccessDatabase (DatabaseType._all, DatabaseAction._load);
		}

		if (GUILayout.Button("Save to XML")) {
			xmlDB.AccessDatabase (DatabaseType._all, DatabaseAction._save);
		}

		GUILayout.BeginHorizontal ("box");
		EditorGUILayout.Toggle("Load Database:",xmlDB._isLoading);
		EditorGUILayout.Toggle("Save Database:",xmlDB._isSaving);
		GUILayout.EndHorizontal();


		/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
			DISPLAY WEAPON LIST
			This creates a nicely formatted header, that gives us details on the Treeview we're going to implement below it.
		// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

		GUILayout.Space (10);
		GUILayout.BeginVertical ("box");

		EditorGUILayout.LabelField("Weapon Database", EditorStyles.boldLabel);

		// Incremenet our Counter. We want to know how many there are in total!

		_itWeaponCount = 0;
		foreach (WeaponLevel dbWeaponLevel in xmlDB._weaponDB._lAllWeapons) {
			_itWeaponCount += dbWeaponLevel._lWeapons.Count;
		}

		// Print out the Title Headings, and make sure there's a button to show/hide the main weapon display.
		GUILayout.BeginHorizontal ();

		if (GUILayout.Button (_showWeapons ? "Hide" : "Show", GUILayout.Width(100))) {
			_showWeapons = !_showWeapons;
		}

		GUILayout.Label ("Total Weapons:", GUILayout.Width(100));
		GUILayout.Label (_itWeaponCount.ToString (), GUILayout.Width(30));

		GUILayout.EndHorizontal ();

		// Now, we need to create a proper hierachy for the multiple lists.

		if (_showWeapons) {
			int it = 1;
			foreach (WeaponLevel dbWeaponLevel in xmlDB._weaponDB._lAllWeapons) {

				GUILayout.Space (10);
				GUILayout.BeginHorizontal ();

				GUILayout.Space (5);
				EditorGUILayout.LabelField ("Level " + it.ToString(), EditorStyles.boldLabel, GUILayout.Width(50));

				EditorGUILayout.LabelField ("Name", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (100));
				GUILayout.Space (50);
				EditorGUILayout.LabelField ("DMG", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("SPD", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("VAL", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("Type", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (120));
				GUILayout.EndHorizontal ();

				int it2 = 0;
				foreach (Weapon dbWeapon in dbWeaponLevel._lWeapons) {

					GUILayout.Space (1);
					GUILayout.BeginHorizontal ("box");

					if (GUILayout.Button ("X", GUILayout.Width(20))) {
						dbWeaponLevel._lWeapons.RemoveAt(it2);
						return;
					}

					dbWeapon._stName = EditorGUILayout.TextField(dbWeapon._stName, GUILayout.Width(180));
					dbWeapon._itDamage = EditorGUILayout.IntField (dbWeapon._itDamage, GUILayout.Width(30));
					dbWeapon._itSpeed = EditorGUILayout.IntField (dbWeapon._itSpeed, GUILayout.Width(30));
					dbWeapon._itValue = EditorGUILayout.IntField (dbWeapon._itValue, GUILayout.Width(30));
					dbWeapon._stType = EditorGUILayout.TextField(dbWeapon._stType, GUILayout.Width(120));

					GUILayout.EndHorizontal ();
					it2++;

				}

				if (GUILayout.Button ("Add Weapon", GUILayout.Width(435))) {
					dbWeaponLevel._lWeapons.Add (new Weapon());
					return;
				}

				it++;
			}
		}

		GUILayout.EndVertical ();


		/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
			DISPLAY ARMOUR LIST
			This creates a nicely formatted header, that gives us details on the Treeview we're going to implement below it.
		// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

		GUILayout.Space (10);
		GUILayout.BeginVertical ("box");

		EditorGUILayout.LabelField("Armour Database", EditorStyles.boldLabel);

		// Incremenet our Counter. We want to know how many there are in total!

		_itArmourCount = 0;
		foreach (ArmourLevel dbArmourLevel in xmlDB._armourDB._lAllArmours) {
			_itArmourCount += dbArmourLevel._lArmours.Count;
		}

		// Print out the Title Headings, and make sure there's a button to show/hide the main armour display.
		GUILayout.BeginHorizontal ();

		if (GUILayout.Button (_showArmours ? "Hide" : "Show", GUILayout.Width(100))) {
			_showArmours = !_showArmours;
		}

		GUILayout.Label ("Total Armours:", GUILayout.Width(100));
		GUILayout.Label (_itArmourCount.ToString (), GUILayout.Width(30));

		GUILayout.EndHorizontal ();

		// Now, we need to create a proper hierachy for the multiple lists.

		if (_showArmours) {
			int it = 1;
			foreach (ArmourLevel dbArmourLevel in xmlDB._armourDB._lAllArmours) {

				GUILayout.Space (20);
				GUILayout.BeginHorizontal ();

				GUILayout.Space (5);
				EditorGUILayout.LabelField ("Level " + it.ToString(), EditorStyles.boldLabel, GUILayout.Width(50));

				EditorGUILayout.LabelField ("Name", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (100));
				GUILayout.Space (50);
				EditorGUILayout.LabelField ("DEF", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("VAL", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				GUILayout.EndHorizontal ();

				int it2 = 0;
				foreach (Armour dbArmour in dbArmourLevel._lArmours) {

					GUILayout.Space (1);
					GUILayout.BeginHorizontal ("box");

					if (GUILayout.Button ("X", GUILayout.Width(20))) {
						dbArmourLevel._lArmours.RemoveAt(it2);
						return;
					}

					dbArmour._stName = EditorGUILayout.TextField(dbArmour._stName, GUILayout.Width(180));
					dbArmour._itDefence = EditorGUILayout.IntField (dbArmour._itDefence, GUILayout.Width(30));
					dbArmour._itValue = EditorGUILayout.IntField (dbArmour._itValue, GUILayout.Width(30));

					GUILayout.EndHorizontal ();
					it2++;

				}

				if (GUILayout.Button ("Add Armour", GUILayout.Width(280))) {
					dbArmourLevel._lArmours.Add (new Armour());
					return;
				}

				it++;
			}
		}

		GUILayout.EndVertical ();


		/* --------------------------------------------------------------------------------------------------------------------------------------------------------- //
			DISPLAY OPPONENT LIST
			This creates a nicely formatted header, that gives us details on the Treeview we're going to implement below it.
		// --------------------------------------------------------------------------------------------------------------------------------------------------------- */

		GUILayout.Space (10);
		GUILayout.BeginVertical ("box");

		EditorGUILayout.LabelField("Opponent Database", EditorStyles.boldLabel);

		// Incremenet our Counter. We want to know how many there are in total!

		_itOpponentCount = 0;
		foreach (OpponentLevel dbOpponentLevel in xmlDB._opponentDB._lAllOpponents) {
			_itOpponentCount += dbOpponentLevel._lOpponents.Count;
		}

		// Print out the Title Headings, and make sure there's a button to show/hide the main opponent display.
		GUILayout.BeginHorizontal ();

		if (GUILayout.Button (_showOpponents ? "Hide" : "Show", GUILayout.Width(100))) {
			_showOpponents = !_showOpponents;
		}

		GUILayout.Label ("Total Opponents:", GUILayout.Width(100));
		GUILayout.Label (_itOpponentCount.ToString (), GUILayout.Width(30));

		GUILayout.EndHorizontal ();

		// Now, we need to create a proper hierachy for the multiple lists.

		if (_showOpponents) {
			int it = 1;
			foreach (OpponentLevel dbOpponentLevel in xmlDB._opponentDB._lAllOpponents) {

				GUILayout.Space (20);
				GUILayout.BeginHorizontal ();

				GUILayout.Space (5);
				EditorGUILayout.LabelField ("Level " + it.ToString(), EditorStyles.boldLabel, GUILayout.Width(50));
				EditorGUILayout.LabelField ("Name", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (100));
				GUILayout.Space (50);
				EditorGUILayout.LabelField ("HP", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("DAM", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("SPD", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("DEF", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (30));
				EditorGUILayout.LabelField ("Battlecry", EditorStyles.centeredGreyMiniLabel, GUILayout.Width (120));

				GUILayout.EndHorizontal ();

				int it2 = 0;
				foreach (Opponent dbOpponent in dbOpponentLevel._lOpponents) {

					GUILayout.Space (1);
					GUILayout.BeginHorizontal ("box");

					if (GUILayout.Button ("X", GUILayout.Width(20))) {
						dbOpponentLevel._lOpponents.RemoveAt(it2);
						return;
					}

					dbOpponent._stName = EditorGUILayout.TextField(dbOpponent._stName, GUILayout.Width(180));
					dbOpponent._itHealth = EditorGUILayout.IntField (dbOpponent._itHealth, GUILayout.Width(30));
					dbOpponent._itDamage = EditorGUILayout.IntField (dbOpponent._itDamage, GUILayout.Width(30));
					dbOpponent._itSpeed = EditorGUILayout.IntField (dbOpponent._itSpeed, GUILayout.Width(30));
					dbOpponent._itDefence = EditorGUILayout.IntField (dbOpponent._itDefence, GUILayout.Width(30));
					dbOpponent._stBattlecry = EditorGUILayout.TextField(dbOpponent._stBattlecry, GUILayout.Width(110));

					GUILayout.EndHorizontal ();
					it2++;

				}

				if (GUILayout.Button ("Add Opponent", GUILayout.Width(460))) {
					dbOpponentLevel._lOpponents.Add (new Opponent());
					return;
				}

				it++;
			}
		}

		GUILayout.EndVertical ();



		// --------------------------------------------------------------------------------------------------------------------------------------------------------- */
		// Some Basic Cleanup

		// Preserve the Default Inspector underneath the custom button.
		// DrawDefaultInspector ();

		GUILayout.Space (10);

	}

}